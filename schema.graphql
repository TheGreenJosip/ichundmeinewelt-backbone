# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: UserRoleType
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  admin
  user
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: UserRoleTypeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: UserRoleType
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: UserRoleType
  createdAt: DateTime
  updatedAt: DateTime
}

type Post {
  id: ID!
  title: String
  slug: String
  excerpt: String
  coverImage: ImageFieldOutput
  content: Post_content_Document
  status: String
  publishedAt: DateTime
  featured: Boolean
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  readingTime: String
  contentHtml: String
  viewCount: Int
  likeCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  excerpt: StringFilter
  status: StringNullableFilter
  publishedAt: DateTimeNullableFilter
  featured: BooleanFilter
  tags: TagManyRelationFilter
  viewCount: IntNullableFilter
  likeCount: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  excerpt: OrderDirection
  status: OrderDirection
  publishedAt: OrderDirection
  featured: OrderDirection
  viewCount: OrderDirection
  likeCount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  title: String
  slug: String
  excerpt: String
  coverImage: ImageFieldInput
  content: JSON
  status: String
  publishedAt: DateTime
  featured: Boolean
  tags: TagRelateToManyForUpdateInput
  viewCount: Int
  likeCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  excerpt: String
  coverImage: ImageFieldInput
  content: JSON
  status: String
  publishedAt: DateTime
  featured: Boolean
  tags: TagRelateToManyForCreateInput
  viewCount: Int
  likeCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type ContactSubmission {
  id: ID!
  name: String
  email: String
  message: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ContactSubmissionWhereUniqueInput {
  id: ID
}

input ContactSubmissionWhereInput {
  AND: [ContactSubmissionWhereInput!]
  OR: [ContactSubmissionWhereInput!]
  NOT: [ContactSubmissionWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  message: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ContactSubmissionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  message: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ContactSubmissionUpdateInput {
  name: String
  email: String
  message: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ContactSubmissionUpdateArgs {
  where: ContactSubmissionWhereUniqueInput!
  data: ContactSubmissionUpdateInput!
}

input ContactSubmissionCreateInput {
  name: String
  email: String
  message: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Subscriber {
  id: ID!
  email: String
  name: String
  source: String
  status: String
  consentGiven: Boolean
  subscribedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input SubscriberWhereUniqueInput {
  id: ID
  email: String
}

input SubscriberWhereInput {
  AND: [SubscriberWhereInput!]
  OR: [SubscriberWhereInput!]
  NOT: [SubscriberWhereInput!]
  id: IDFilter
  email: StringFilter
  name: StringFilter
  source: StringFilter
  status: StringNullableFilter
  consentGiven: BooleanFilter
  subscribedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubscriberOrderByInput {
  id: OrderDirection
  email: OrderDirection
  name: OrderDirection
  source: OrderDirection
  status: OrderDirection
  consentGiven: OrderDirection
  subscribedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SubscriberUpdateInput {
  email: String
  name: String
  source: String
  status: String
  consentGiven: Boolean
  subscribedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input SubscriberUpdateArgs {
  where: SubscriberWhereUniqueInput!
  data: SubscriberUpdateInput!
}

input SubscriberCreateInput {
  email: String
  name: String
  source: String
  status: String
  consentGiven: Boolean
  subscribedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createContactSubmission(data: ContactSubmissionCreateInput!): ContactSubmission
  createContactSubmissions(data: [ContactSubmissionCreateInput!]!): [ContactSubmission]
  updateContactSubmission(where: ContactSubmissionWhereUniqueInput!, data: ContactSubmissionUpdateInput!): ContactSubmission
  updateContactSubmissions(data: [ContactSubmissionUpdateArgs!]!): [ContactSubmission]
  deleteContactSubmission(where: ContactSubmissionWhereUniqueInput!): ContactSubmission
  deleteContactSubmissions(where: [ContactSubmissionWhereUniqueInput!]!): [ContactSubmission]
  createSubscriber(data: SubscriberCreateInput!): Subscriber
  createSubscribers(data: [SubscriberCreateInput!]!): [Subscriber]
  updateSubscriber(where: SubscriberWhereUniqueInput!, data: SubscriberUpdateInput!): Subscriber
  updateSubscribers(data: [SubscriberUpdateArgs!]!): [Subscriber]
  deleteSubscriber(where: SubscriberWhereUniqueInput!): Subscriber
  deleteSubscribers(where: [SubscriberWhereUniqueInput!]!): [Subscriber]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!

  """
  Logs a message to the server console and returns a confirmation string.
  """
  logMessage(
    """The message text to log to the server console."""
    message: String!
  ): String

  """Creates a new contact form submission."""
  submitContactForm(
    """Name of the person submitting the form."""
    name: String!

    """Email address of the person submitting the form."""
    email: String!

    """Message content."""
    message: String!

    """Hidden anti-spam field — should be empty for real users."""
    honeypot: String
  ): String

  """Creates a new newsletter subscriber."""
  submitNewsletterSignup(
    """Subscriber email address."""
    email: String!

    """Optional subscriber name."""
    name: String

    """Where the signup happened (e.g., landing-page, blog-footer)."""
    source: String

    """Hidden anti-spam field — should be empty for real users."""
    honeypot: String
  ): String
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: UserRoleType
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  contactSubmission(where: ContactSubmissionWhereUniqueInput!): ContactSubmission
  contactSubmissions(where: ContactSubmissionWhereInput! = {}, orderBy: [ContactSubmissionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactSubmissionWhereUniqueInput): [ContactSubmission!]
  contactSubmissionsCount(where: ContactSubmissionWhereInput! = {}): Int
  subscriber(where: SubscriberWhereUniqueInput!): Subscriber
  subscribers(where: SubscriberWhereInput! = {}, orderBy: [SubscriberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriberWhereUniqueInput): [Subscriber!]
  subscribersCount(where: SubscriberWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem

  """Returns a static greeting message for testing the API connection."""
  helloWorld: String
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
